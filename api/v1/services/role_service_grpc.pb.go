// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/v1/services/role_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RolesServiceClient is the client API for RolesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolesServiceClient interface {
	// Create Roles swagger:route POST /api/v1/{organization_id}/{namespace}/roles roles createRoleRequest
	//
	// Responses:
	// 200: createRoleResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Create(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// Update Roles swagger:route PUT /api/v1/{organization_id}/{namespace}/roles/{id} roles updateRoleRequest
	//
	// Responses:
	// 200: updateRoleResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Update(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	// Query Role swagger:route GET /api/v1/{organization_id}/{namespace}/roles roles queryRoleRequest
	//
	// Responses:
	// 200: queryRoleResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Query(ctx context.Context, in *QueryRoleRequest, opts ...grpc.CallOption) (RolesService_QueryClient, error)
	// Delete Role swagger:route DELETE /api/v1/{organization_id}/{namespace}/roles/{id} roles deleteRoleRequest
	//
	// Responses:
	// 200: deleteRoleResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Delete(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// AddPermissions Role swagger:route PUT /api/v1/{organization_id}/{namespace}/roles/{id}/permissions/add roles addPermissionsToRoleRequest
	//
	// Responses:
	// 200: addPermissionsToRoleResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	AddPermissions(ctx context.Context, in *AddPermissionsToRoleRequest, opts ...grpc.CallOption) (*AddPermissionsToRoleResponse, error)
	// DeletePermissions Role swagger:route PUT /api/v1/{organization_id}/{namespace}/roles/{id}/permissions/delete roles deletePermissionsToRoleRequest
	//
	// Responses:
	// 200: deletePermissionsToRoleResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	DeletePermissions(ctx context.Context, in *DeletePermissionsToRoleRequest, opts ...grpc.CallOption) (*DeletePermissionsToRoleResponse, error)
}

type rolesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolesServiceClient(cc grpc.ClientConnInterface) RolesServiceClient {
	return &rolesServiceClient{cc}
}

func (c *rolesServiceClient) Create(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.RolesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) Update(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.RolesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) Query(ctx context.Context, in *QueryRoleRequest, opts ...grpc.CallOption) (RolesService_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &RolesService_ServiceDesc.Streams[0], "/api.authz.services.RolesService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &rolesServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RolesService_QueryClient interface {
	Recv() (*QueryRoleResponse, error)
	grpc.ClientStream
}

type rolesServiceQueryClient struct {
	grpc.ClientStream
}

func (x *rolesServiceQueryClient) Recv() (*QueryRoleResponse, error) {
	m := new(QueryRoleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolesServiceClient) Delete(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.RolesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) AddPermissions(ctx context.Context, in *AddPermissionsToRoleRequest, opts ...grpc.CallOption) (*AddPermissionsToRoleResponse, error) {
	out := new(AddPermissionsToRoleResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.RolesService/AddPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesServiceClient) DeletePermissions(ctx context.Context, in *DeletePermissionsToRoleRequest, opts ...grpc.CallOption) (*DeletePermissionsToRoleResponse, error) {
	out := new(DeletePermissionsToRoleResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.RolesService/DeletePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolesServiceServer is the server API for RolesService service.
// All implementations must embed UnimplementedRolesServiceServer
// for forward compatibility
type RolesServiceServer interface {
	// Create Roles swagger:route POST /api/v1/{organization_id}/{namespace}/roles roles createRoleRequest
	//
	// Responses:
	// 200: createRoleResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Create(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// Update Roles swagger:route PUT /api/v1/{organization_id}/{namespace}/roles/{id} roles updateRoleRequest
	//
	// Responses:
	// 200: updateRoleResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Update(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	// Query Role swagger:route GET /api/v1/{organization_id}/{namespace}/roles roles queryRoleRequest
	//
	// Responses:
	// 200: queryRoleResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Query(*QueryRoleRequest, RolesService_QueryServer) error
	// Delete Role swagger:route DELETE /api/v1/{organization_id}/{namespace}/roles/{id} roles deleteRoleRequest
	//
	// Responses:
	// 200: deleteRoleResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Delete(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// AddPermissions Role swagger:route PUT /api/v1/{organization_id}/{namespace}/roles/{id}/permissions/add roles addPermissionsToRoleRequest
	//
	// Responses:
	// 200: addPermissionsToRoleResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	AddPermissions(context.Context, *AddPermissionsToRoleRequest) (*AddPermissionsToRoleResponse, error)
	// DeletePermissions Role swagger:route PUT /api/v1/{organization_id}/{namespace}/roles/{id}/permissions/delete roles deletePermissionsToRoleRequest
	//
	// Responses:
	// 200: deletePermissionsToRoleResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	DeletePermissions(context.Context, *DeletePermissionsToRoleRequest) (*DeletePermissionsToRoleResponse, error)
	mustEmbedUnimplementedRolesServiceServer()
}

// UnimplementedRolesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRolesServiceServer struct {
}

func (UnimplementedRolesServiceServer) Create(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRolesServiceServer) Update(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRolesServiceServer) Query(*QueryRoleRequest, RolesService_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedRolesServiceServer) Delete(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRolesServiceServer) AddPermissions(context.Context, *AddPermissionsToRoleRequest) (*AddPermissionsToRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissions not implemented")
}
func (UnimplementedRolesServiceServer) DeletePermissions(context.Context, *DeletePermissionsToRoleRequest) (*DeletePermissionsToRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissions not implemented")
}
func (UnimplementedRolesServiceServer) mustEmbedUnimplementedRolesServiceServer() {}

// UnsafeRolesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolesServiceServer will
// result in compilation errors.
type UnsafeRolesServiceServer interface {
	mustEmbedUnimplementedRolesServiceServer()
}

func RegisterRolesServiceServer(s grpc.ServiceRegistrar, srv RolesServiceServer) {
	s.RegisterService(&RolesService_ServiceDesc, srv)
}

func _RolesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.RolesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).Create(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.RolesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).Update(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRoleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RolesServiceServer).Query(m, &rolesServiceQueryServer{stream})
}

type RolesService_QueryServer interface {
	Send(*QueryRoleResponse) error
	grpc.ServerStream
}

type rolesServiceQueryServer struct {
	grpc.ServerStream
}

func (x *rolesServiceQueryServer) Send(m *QueryRoleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RolesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.RolesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).Delete(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_AddPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionsToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).AddPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.RolesService/AddPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).AddPermissions(ctx, req.(*AddPermissionsToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolesService_DeletePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionsToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServiceServer).DeletePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.RolesService/DeletePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServiceServer).DeletePermissions(ctx, req.(*DeletePermissionsToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RolesService_ServiceDesc is the grpc.ServiceDesc for RolesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.authz.services.RolesService",
	HandlerType: (*RolesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RolesService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RolesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RolesService_Delete_Handler,
		},
		{
			MethodName: "AddPermissions",
			Handler:    _RolesService_AddPermissions_Handler,
		},
		{
			MethodName: "DeletePermissions",
			Handler:    _RolesService_DeletePermissions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _RolesService_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/services/role_service.proto",
}
