// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/v1/services/principal_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrincipalsServiceClient is the client API for PrincipalsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrincipalsServiceClient interface {
	// Create Principals swagger:route POST /api/v1/{organization_id}/principals principals createPrincipalRequest
	//
	// Responses:
	// 200: createPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Create(ctx context.Context, in *CreatePrincipalRequest, opts ...grpc.CallOption) (*CreatePrincipalResponse, error)
	// Update Principals swagger:route PUT /api/v1/{organization_id}/principals/{id} principals updatePrincipalRequest
	//
	// Responses:
	// 200: updatePrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Update(ctx context.Context, in *UpdatePrincipalRequest, opts ...grpc.CallOption) (*UpdatePrincipalResponse, error)
	// Get Principal swagger:route GET /api/v1/{organization_id}/{namespace}/principals/{id} principals getPrincipalRequest
	//
	// Responses:
	// 200: getPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Get(ctx context.Context, in *GetPrincipalRequest, opts ...grpc.CallOption) (*GetPrincipalResponse, error)
	// Query Principal swagger:route GET /api/v1/{organization_id}/principals principals queryPrincipalRequest
	//
	// Responses:
	// 200: queryPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Query(ctx context.Context, in *QueryPrincipalRequest, opts ...grpc.CallOption) (PrincipalsService_QueryClient, error)
	// Delete Principal swagger:route DELETE /api/v1/{organization_id}/principals/{id} principals deletePrincipalRequest
	//
	// Responses:
	// 200: deletePrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Delete(ctx context.Context, in *DeletePrincipalRequest, opts ...grpc.CallOption) (*DeletePrincipalResponse, error)
	// AddGroups Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/groups/add principals addGroupsToPrincipalRequest
	//
	// Responses:
	// 200: addGroupsToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	AddGroups(ctx context.Context, in *AddGroupsToPrincipalRequest, opts ...grpc.CallOption) (*AddGroupsToPrincipalResponse, error)
	// DeleteGroups Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/groups/delete principals deleteGroupsToPrincipalRequest
	//
	// Responses:
	// 200: deleteGroupsToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	DeleteGroups(ctx context.Context, in *DeleteGroupsToPrincipalRequest, opts ...grpc.CallOption) (*DeleteGroupsToPrincipalResponse, error)
	// AddRoles Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/roles/add principals addRolesToPrincipalRequest
	//
	// Responses:
	// 200: addRolesToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	AddRoles(ctx context.Context, in *AddRolesToPrincipalRequest, opts ...grpc.CallOption) (*AddRolesToPrincipalResponse, error)
	// DeleteRole Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/roles/delete principals deleteRolesToPrincipalRequest
	//
	// Responses:
	// 200: deleteRolesToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	DeleteRoles(ctx context.Context, in *DeleteRolesToPrincipalRequest, opts ...grpc.CallOption) (*DeleteRolesToPrincipalResponse, error)
	// AddPermissions Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/permissions/add principals addPermissionsToPrincipalRequest
	//
	// Responses:
	// 200: addPermissionsToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	AddPermissions(ctx context.Context, in *AddPermissionsToPrincipalRequest, opts ...grpc.CallOption) (*AddPermissionsToPrincipalResponse, error)
	// DeletePermissions Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/permissions/delete principals deletePermissionsToPrincipalRequest
	//
	// Responses:
	// 200: deletePermissionsToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	DeletePermissions(ctx context.Context, in *DeletePermissionsToPrincipalRequest, opts ...grpc.CallOption) (*DeletePermissionsToPrincipalResponse, error)
	// AddRelationships Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/relations/add principals addRelationshipsToPrincipalRequest
	//
	// Responses:
	// 200: addRelationshipsToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	AddRelationships(ctx context.Context, in *AddRelationshipsToPrincipalRequest, opts ...grpc.CallOption) (*AddRelationshipsToPrincipalResponse, error)
	// DeleteRelationships Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/relations/delete principals deleteRelationshipsToPrincipalRequest
	//
	// Responses:
	// 200: deleteRelationshipsToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	DeleteRelationships(ctx context.Context, in *DeleteRelationshipsToPrincipalRequest, opts ...grpc.CallOption) (*DeleteRelationshipsToPrincipalResponse, error)
}

type principalsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrincipalsServiceClient(cc grpc.ClientConnInterface) PrincipalsServiceClient {
	return &principalsServiceClient{cc}
}

func (c *principalsServiceClient) Create(ctx context.Context, in *CreatePrincipalRequest, opts ...grpc.CallOption) (*CreatePrincipalResponse, error) {
	out := new(CreatePrincipalResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.PrincipalsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsServiceClient) Update(ctx context.Context, in *UpdatePrincipalRequest, opts ...grpc.CallOption) (*UpdatePrincipalResponse, error) {
	out := new(UpdatePrincipalResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.PrincipalsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsServiceClient) Get(ctx context.Context, in *GetPrincipalRequest, opts ...grpc.CallOption) (*GetPrincipalResponse, error) {
	out := new(GetPrincipalResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.PrincipalsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsServiceClient) Query(ctx context.Context, in *QueryPrincipalRequest, opts ...grpc.CallOption) (PrincipalsService_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrincipalsService_ServiceDesc.Streams[0], "/api.authz.services.PrincipalsService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &principalsServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrincipalsService_QueryClient interface {
	Recv() (*QueryPrincipalResponse, error)
	grpc.ClientStream
}

type principalsServiceQueryClient struct {
	grpc.ClientStream
}

func (x *principalsServiceQueryClient) Recv() (*QueryPrincipalResponse, error) {
	m := new(QueryPrincipalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *principalsServiceClient) Delete(ctx context.Context, in *DeletePrincipalRequest, opts ...grpc.CallOption) (*DeletePrincipalResponse, error) {
	out := new(DeletePrincipalResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.PrincipalsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsServiceClient) AddGroups(ctx context.Context, in *AddGroupsToPrincipalRequest, opts ...grpc.CallOption) (*AddGroupsToPrincipalResponse, error) {
	out := new(AddGroupsToPrincipalResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.PrincipalsService/AddGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsServiceClient) DeleteGroups(ctx context.Context, in *DeleteGroupsToPrincipalRequest, opts ...grpc.CallOption) (*DeleteGroupsToPrincipalResponse, error) {
	out := new(DeleteGroupsToPrincipalResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.PrincipalsService/DeleteGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsServiceClient) AddRoles(ctx context.Context, in *AddRolesToPrincipalRequest, opts ...grpc.CallOption) (*AddRolesToPrincipalResponse, error) {
	out := new(AddRolesToPrincipalResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.PrincipalsService/AddRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsServiceClient) DeleteRoles(ctx context.Context, in *DeleteRolesToPrincipalRequest, opts ...grpc.CallOption) (*DeleteRolesToPrincipalResponse, error) {
	out := new(DeleteRolesToPrincipalResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.PrincipalsService/DeleteRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsServiceClient) AddPermissions(ctx context.Context, in *AddPermissionsToPrincipalRequest, opts ...grpc.CallOption) (*AddPermissionsToPrincipalResponse, error) {
	out := new(AddPermissionsToPrincipalResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.PrincipalsService/AddPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsServiceClient) DeletePermissions(ctx context.Context, in *DeletePermissionsToPrincipalRequest, opts ...grpc.CallOption) (*DeletePermissionsToPrincipalResponse, error) {
	out := new(DeletePermissionsToPrincipalResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.PrincipalsService/DeletePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsServiceClient) AddRelationships(ctx context.Context, in *AddRelationshipsToPrincipalRequest, opts ...grpc.CallOption) (*AddRelationshipsToPrincipalResponse, error) {
	out := new(AddRelationshipsToPrincipalResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.PrincipalsService/AddRelationships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *principalsServiceClient) DeleteRelationships(ctx context.Context, in *DeleteRelationshipsToPrincipalRequest, opts ...grpc.CallOption) (*DeleteRelationshipsToPrincipalResponse, error) {
	out := new(DeleteRelationshipsToPrincipalResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.PrincipalsService/DeleteRelationships", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrincipalsServiceServer is the server API for PrincipalsService service.
// All implementations must embed UnimplementedPrincipalsServiceServer
// for forward compatibility
type PrincipalsServiceServer interface {
	// Create Principals swagger:route POST /api/v1/{organization_id}/principals principals createPrincipalRequest
	//
	// Responses:
	// 200: createPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Create(context.Context, *CreatePrincipalRequest) (*CreatePrincipalResponse, error)
	// Update Principals swagger:route PUT /api/v1/{organization_id}/principals/{id} principals updatePrincipalRequest
	//
	// Responses:
	// 200: updatePrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Update(context.Context, *UpdatePrincipalRequest) (*UpdatePrincipalResponse, error)
	// Get Principal swagger:route GET /api/v1/{organization_id}/{namespace}/principals/{id} principals getPrincipalRequest
	//
	// Responses:
	// 200: getPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Get(context.Context, *GetPrincipalRequest) (*GetPrincipalResponse, error)
	// Query Principal swagger:route GET /api/v1/{organization_id}/principals principals queryPrincipalRequest
	//
	// Responses:
	// 200: queryPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Query(*QueryPrincipalRequest, PrincipalsService_QueryServer) error
	// Delete Principal swagger:route DELETE /api/v1/{organization_id}/principals/{id} principals deletePrincipalRequest
	//
	// Responses:
	// 200: deletePrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Delete(context.Context, *DeletePrincipalRequest) (*DeletePrincipalResponse, error)
	// AddGroups Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/groups/add principals addGroupsToPrincipalRequest
	//
	// Responses:
	// 200: addGroupsToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	AddGroups(context.Context, *AddGroupsToPrincipalRequest) (*AddGroupsToPrincipalResponse, error)
	// DeleteGroups Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/groups/delete principals deleteGroupsToPrincipalRequest
	//
	// Responses:
	// 200: deleteGroupsToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	DeleteGroups(context.Context, *DeleteGroupsToPrincipalRequest) (*DeleteGroupsToPrincipalResponse, error)
	// AddRoles Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/roles/add principals addRolesToPrincipalRequest
	//
	// Responses:
	// 200: addRolesToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	AddRoles(context.Context, *AddRolesToPrincipalRequest) (*AddRolesToPrincipalResponse, error)
	// DeleteRole Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/roles/delete principals deleteRolesToPrincipalRequest
	//
	// Responses:
	// 200: deleteRolesToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	DeleteRoles(context.Context, *DeleteRolesToPrincipalRequest) (*DeleteRolesToPrincipalResponse, error)
	// AddPermissions Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/permissions/add principals addPermissionsToPrincipalRequest
	//
	// Responses:
	// 200: addPermissionsToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	AddPermissions(context.Context, *AddPermissionsToPrincipalRequest) (*AddPermissionsToPrincipalResponse, error)
	// DeletePermissions Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/permissions/delete principals deletePermissionsToPrincipalRequest
	//
	// Responses:
	// 200: deletePermissionsToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	DeletePermissions(context.Context, *DeletePermissionsToPrincipalRequest) (*DeletePermissionsToPrincipalResponse, error)
	// AddRelationships Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/relations/add principals addRelationshipsToPrincipalRequest
	//
	// Responses:
	// 200: addRelationshipsToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	AddRelationships(context.Context, *AddRelationshipsToPrincipalRequest) (*AddRelationshipsToPrincipalResponse, error)
	// DeleteRelationships Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/relations/delete principals deleteRelationshipsToPrincipalRequest
	//
	// Responses:
	// 200: deleteRelationshipsToPrincipalResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	DeleteRelationships(context.Context, *DeleteRelationshipsToPrincipalRequest) (*DeleteRelationshipsToPrincipalResponse, error)
	mustEmbedUnimplementedPrincipalsServiceServer()
}

// UnimplementedPrincipalsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrincipalsServiceServer struct {
}

func (UnimplementedPrincipalsServiceServer) Create(context.Context, *CreatePrincipalRequest) (*CreatePrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPrincipalsServiceServer) Update(context.Context, *UpdatePrincipalRequest) (*UpdatePrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPrincipalsServiceServer) Get(context.Context, *GetPrincipalRequest) (*GetPrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPrincipalsServiceServer) Query(*QueryPrincipalRequest, PrincipalsService_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedPrincipalsServiceServer) Delete(context.Context, *DeletePrincipalRequest) (*DeletePrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPrincipalsServiceServer) AddGroups(context.Context, *AddGroupsToPrincipalRequest) (*AddGroupsToPrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroups not implemented")
}
func (UnimplementedPrincipalsServiceServer) DeleteGroups(context.Context, *DeleteGroupsToPrincipalRequest) (*DeleteGroupsToPrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroups not implemented")
}
func (UnimplementedPrincipalsServiceServer) AddRoles(context.Context, *AddRolesToPrincipalRequest) (*AddRolesToPrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoles not implemented")
}
func (UnimplementedPrincipalsServiceServer) DeleteRoles(context.Context, *DeleteRolesToPrincipalRequest) (*DeleteRolesToPrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoles not implemented")
}
func (UnimplementedPrincipalsServiceServer) AddPermissions(context.Context, *AddPermissionsToPrincipalRequest) (*AddPermissionsToPrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissions not implemented")
}
func (UnimplementedPrincipalsServiceServer) DeletePermissions(context.Context, *DeletePermissionsToPrincipalRequest) (*DeletePermissionsToPrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissions not implemented")
}
func (UnimplementedPrincipalsServiceServer) AddRelationships(context.Context, *AddRelationshipsToPrincipalRequest) (*AddRelationshipsToPrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRelationships not implemented")
}
func (UnimplementedPrincipalsServiceServer) DeleteRelationships(context.Context, *DeleteRelationshipsToPrincipalRequest) (*DeleteRelationshipsToPrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelationships not implemented")
}
func (UnimplementedPrincipalsServiceServer) mustEmbedUnimplementedPrincipalsServiceServer() {}

// UnsafePrincipalsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrincipalsServiceServer will
// result in compilation errors.
type UnsafePrincipalsServiceServer interface {
	mustEmbedUnimplementedPrincipalsServiceServer()
}

func RegisterPrincipalsServiceServer(s grpc.ServiceRegistrar, srv PrincipalsServiceServer) {
	s.RegisterService(&PrincipalsService_ServiceDesc, srv)
}

func _PrincipalsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.PrincipalsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServiceServer).Create(ctx, req.(*CreatePrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.PrincipalsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServiceServer).Update(ctx, req.(*UpdatePrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.PrincipalsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServiceServer).Get(ctx, req.(*GetPrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalsService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryPrincipalRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrincipalsServiceServer).Query(m, &principalsServiceQueryServer{stream})
}

type PrincipalsService_QueryServer interface {
	Send(*QueryPrincipalResponse) error
	grpc.ServerStream
}

type principalsServiceQueryServer struct {
	grpc.ServerStream
}

func (x *principalsServiceQueryServer) Send(m *QueryPrincipalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PrincipalsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.PrincipalsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServiceServer).Delete(ctx, req.(*DeletePrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalsService_AddGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupsToPrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServiceServer).AddGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.PrincipalsService/AddGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServiceServer).AddGroups(ctx, req.(*AddGroupsToPrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalsService_DeleteGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupsToPrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServiceServer).DeleteGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.PrincipalsService/DeleteGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServiceServer).DeleteGroups(ctx, req.(*DeleteGroupsToPrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalsService_AddRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolesToPrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServiceServer).AddRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.PrincipalsService/AddRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServiceServer).AddRoles(ctx, req.(*AddRolesToPrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalsService_DeleteRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRolesToPrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServiceServer).DeleteRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.PrincipalsService/DeleteRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServiceServer).DeleteRoles(ctx, req.(*DeleteRolesToPrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalsService_AddPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionsToPrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServiceServer).AddPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.PrincipalsService/AddPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServiceServer).AddPermissions(ctx, req.(*AddPermissionsToPrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalsService_DeletePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionsToPrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServiceServer).DeletePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.PrincipalsService/DeletePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServiceServer).DeletePermissions(ctx, req.(*DeletePermissionsToPrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalsService_AddRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRelationshipsToPrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServiceServer).AddRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.PrincipalsService/AddRelationships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServiceServer).AddRelationships(ctx, req.(*AddRelationshipsToPrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrincipalsService_DeleteRelationships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationshipsToPrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrincipalsServiceServer).DeleteRelationships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.PrincipalsService/DeleteRelationships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrincipalsServiceServer).DeleteRelationships(ctx, req.(*DeleteRelationshipsToPrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrincipalsService_ServiceDesc is the grpc.ServiceDesc for PrincipalsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrincipalsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.authz.services.PrincipalsService",
	HandlerType: (*PrincipalsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PrincipalsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PrincipalsService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PrincipalsService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PrincipalsService_Delete_Handler,
		},
		{
			MethodName: "AddGroups",
			Handler:    _PrincipalsService_AddGroups_Handler,
		},
		{
			MethodName: "DeleteGroups",
			Handler:    _PrincipalsService_DeleteGroups_Handler,
		},
		{
			MethodName: "AddRoles",
			Handler:    _PrincipalsService_AddRoles_Handler,
		},
		{
			MethodName: "DeleteRoles",
			Handler:    _PrincipalsService_DeleteRoles_Handler,
		},
		{
			MethodName: "AddPermissions",
			Handler:    _PrincipalsService_AddPermissions_Handler,
		},
		{
			MethodName: "DeletePermissions",
			Handler:    _PrincipalsService_DeletePermissions_Handler,
		},
		{
			MethodName: "AddRelationships",
			Handler:    _PrincipalsService_AddRelationships_Handler,
		},
		{
			MethodName: "DeleteRelationships",
			Handler:    _PrincipalsService_DeleteRelationships_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _PrincipalsService_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/services/principal_service.proto",
}
