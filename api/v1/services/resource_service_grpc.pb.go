// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/v1/services/resource_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourcesServiceClient is the client API for ResourcesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcesServiceClient interface {
	// Create Resources swagger:route POST /api/v1/{organization_id}/{namespace}/resources resources createResourceRequest
	//
	// Responses:
	// 200: createResourceResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Create(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error)
	// Update Resources swagger:route PUT /api/v1/{organization_id}/{namespace}/resources/{id} resources updateResourceRequest
	//
	// Responses:
	// 200: updateResourceResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Update(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	// Query Resource swagger:route GET /api/v1/{organization_id}/{namespace}/resources resources queryResourceRequest
	//
	// Responses:
	// 200: queryResourceResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Query(ctx context.Context, in *QueryResourceRequest, opts ...grpc.CallOption) (ResourcesService_QueryClient, error)
	// Delete Resource swagger:route DELETE /api/v1/{organization_id}/{namespace}/resources/{id} resources deleteResourceRequest
	//
	// Responses:
	// 200: deleteResourceResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Delete(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	// CountResourceInstances Resources swagger:route GET /api/v1/{organization_id}/{namespace}/resources/{id}/instance_count resources countResourceInstancesRequest
	//
	// Responses:
	// 200: countResourceInstancesResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	CountResourceInstances(ctx context.Context, in *CountResourceInstancesRequest, opts ...grpc.CallOption) (*CountResourceInstancesResponse, error)
	// QueryResourceInstances Resources swagger:route GET /api/v1/{organization_id}/{namespace}/resources/{id}/instances resources queryResourceInstanceRequest
	//
	// Responses:
	// 200: queryResourceInstanceResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	QueryResourceInstances(ctx context.Context, in *QueryResourceInstanceRequest, opts ...grpc.CallOption) (ResourcesService_QueryResourceInstancesClient, error)
}

type resourcesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcesServiceClient(cc grpc.ClientConnInterface) ResourcesServiceClient {
	return &resourcesServiceClient{cc}
}

func (c *resourcesServiceClient) Create(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error) {
	out := new(CreateResourceResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.ResourcesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesServiceClient) Update(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.ResourcesService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesServiceClient) Query(ctx context.Context, in *QueryResourceRequest, opts ...grpc.CallOption) (ResourcesService_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourcesService_ServiceDesc.Streams[0], "/api.authz.services.ResourcesService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourcesServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourcesService_QueryClient interface {
	Recv() (*QueryResourceResponse, error)
	grpc.ClientStream
}

type resourcesServiceQueryClient struct {
	grpc.ClientStream
}

func (x *resourcesServiceQueryClient) Recv() (*QueryResourceResponse, error) {
	m := new(QueryResourceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *resourcesServiceClient) Delete(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.ResourcesService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesServiceClient) CountResourceInstances(ctx context.Context, in *CountResourceInstancesRequest, opts ...grpc.CallOption) (*CountResourceInstancesResponse, error) {
	out := new(CountResourceInstancesResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.ResourcesService/CountResourceInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesServiceClient) QueryResourceInstances(ctx context.Context, in *QueryResourceInstanceRequest, opts ...grpc.CallOption) (ResourcesService_QueryResourceInstancesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourcesService_ServiceDesc.Streams[1], "/api.authz.services.ResourcesService/QueryResourceInstances", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourcesServiceQueryResourceInstancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourcesService_QueryResourceInstancesClient interface {
	Recv() (*QueryResourceInstanceResponse, error)
	grpc.ClientStream
}

type resourcesServiceQueryResourceInstancesClient struct {
	grpc.ClientStream
}

func (x *resourcesServiceQueryResourceInstancesClient) Recv() (*QueryResourceInstanceResponse, error) {
	m := new(QueryResourceInstanceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourcesServiceServer is the server API for ResourcesService service.
// All implementations must embed UnimplementedResourcesServiceServer
// for forward compatibility
type ResourcesServiceServer interface {
	// Create Resources swagger:route POST /api/v1/{organization_id}/{namespace}/resources resources createResourceRequest
	//
	// Responses:
	// 200: createResourceResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Create(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	// Update Resources swagger:route PUT /api/v1/{organization_id}/{namespace}/resources/{id} resources updateResourceRequest
	//
	// Responses:
	// 200: updateResourceResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Update(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	// Query Resource swagger:route GET /api/v1/{organization_id}/{namespace}/resources resources queryResourceRequest
	//
	// Responses:
	// 200: queryResourceResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Query(*QueryResourceRequest, ResourcesService_QueryServer) error
	// Delete Resource swagger:route DELETE /api/v1/{organization_id}/{namespace}/resources/{id} resources deleteResourceRequest
	//
	// Responses:
	// 200: deleteResourceResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Delete(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	// CountResourceInstances Resources swagger:route GET /api/v1/{organization_id}/{namespace}/resources/{id}/instance_count resources countResourceInstancesRequest
	//
	// Responses:
	// 200: countResourceInstancesResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	CountResourceInstances(context.Context, *CountResourceInstancesRequest) (*CountResourceInstancesResponse, error)
	// QueryResourceInstances Resources swagger:route GET /api/v1/{organization_id}/{namespace}/resources/{id}/instances resources queryResourceInstanceRequest
	//
	// Responses:
	// 200: queryResourceInstanceResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	QueryResourceInstances(*QueryResourceInstanceRequest, ResourcesService_QueryResourceInstancesServer) error
	mustEmbedUnimplementedResourcesServiceServer()
}

// UnimplementedResourcesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourcesServiceServer struct {
}

func (UnimplementedResourcesServiceServer) Create(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResourcesServiceServer) Update(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResourcesServiceServer) Query(*QueryResourceRequest, ResourcesService_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedResourcesServiceServer) Delete(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourcesServiceServer) CountResourceInstances(context.Context, *CountResourceInstancesRequest) (*CountResourceInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountResourceInstances not implemented")
}
func (UnimplementedResourcesServiceServer) QueryResourceInstances(*QueryResourceInstanceRequest, ResourcesService_QueryResourceInstancesServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryResourceInstances not implemented")
}
func (UnimplementedResourcesServiceServer) mustEmbedUnimplementedResourcesServiceServer() {}

// UnsafeResourcesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcesServiceServer will
// result in compilation errors.
type UnsafeResourcesServiceServer interface {
	mustEmbedUnimplementedResourcesServiceServer()
}

func RegisterResourcesServiceServer(s grpc.ServiceRegistrar, srv ResourcesServiceServer) {
	s.RegisterService(&ResourcesService_ServiceDesc, srv)
}

func _ResourcesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.ResourcesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).Create(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.ResourcesService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).Update(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcesService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryResourceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourcesServiceServer).Query(m, &resourcesServiceQueryServer{stream})
}

type ResourcesService_QueryServer interface {
	Send(*QueryResourceResponse) error
	grpc.ServerStream
}

type resourcesServiceQueryServer struct {
	grpc.ServerStream
}

func (x *resourcesServiceQueryServer) Send(m *QueryResourceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ResourcesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.ResourcesService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).Delete(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcesService_CountResourceInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountResourceInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServiceServer).CountResourceInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.ResourcesService/CountResourceInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServiceServer).CountResourceInstances(ctx, req.(*CountResourceInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcesService_QueryResourceInstances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryResourceInstanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourcesServiceServer).QueryResourceInstances(m, &resourcesServiceQueryResourceInstancesServer{stream})
}

type ResourcesService_QueryResourceInstancesServer interface {
	Send(*QueryResourceInstanceResponse) error
	grpc.ServerStream
}

type resourcesServiceQueryResourceInstancesServer struct {
	grpc.ServerStream
}

func (x *resourcesServiceQueryResourceInstancesServer) Send(m *QueryResourceInstanceResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ResourcesService_ServiceDesc is the grpc.ServiceDesc for ResourcesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourcesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.authz.services.ResourcesService",
	HandlerType: (*ResourcesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ResourcesService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ResourcesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ResourcesService_Delete_Handler,
		},
		{
			MethodName: "CountResourceInstances",
			Handler:    _ResourcesService_CountResourceInstances_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _ResourcesService_Query_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryResourceInstances",
			Handler:       _ResourcesService_QueryResourceInstances_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/services/resource_service.proto",
}
