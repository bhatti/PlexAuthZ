syntax = "proto3";

package api.authz.services;

option go_package = "github.com/bhatti/PlexAuthZ/api/authz/services";

import "api/v1/types/authz.proto";
import "google/protobuf/timestamp.proto";

// CreatePrincipalRequest is request model for creating principal.
//
// swagger:parameters createPrincipalRequest
message CreatePrincipalRequest {
  // in: path
  string organization_id = 1;

  // in: body
  repeated string namespaces = 2;

  // Username (unique) of the principal user.
  // in: body
  string username = 3;

  // Name of the principal user.
  // in: body
  string name = 4;

  // Attributes of principal
  // in: body
  map<string, string> attributes = 5;
}

// CreatePrincipalResponse is response model for creating principal.
//
// swagger:parameters createPrincipalResponse
message CreatePrincipalResponse {
  // ID unique identifier assigned to this principal.
  // in: body
  string id = 1;
}

// UpdatePrincipalRequest is request model for updating principal.
//
// swagger:parameters updatePrincipalRequest
message UpdatePrincipalRequest {
  // in: path
  string organization_id = 1;
  // in: path
  string id = 2;

  // Version
  // in: body
  int64 version = 3;

  // in: body
  repeated string namespaces = 4;

  // Username (unique) of the principal user.
  // in: body
  string username = 5;

  // Name of the principal user.
  // in: body
  string name = 6;

  // Attributes of principal
  // in: body
  map<string, string> attributes = 7;
}

// UpdatePrincipalResponse is response model for updating principal.
//
// swagger:parameters updatePrincipalResponse
message UpdatePrincipalResponse {
  // ID unique identifier assigned to this principal.
  // in: body
  string id = 1;
}

// DeletePrincipalRequest is request model for deleting principal.
//
// swagger:parameters deletePrincipalRequest
message DeletePrincipalRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string id = 3;
}

// DeletePrincipalResponse is response model for deleting principal by id.
//
// swagger:parameters deletePrincipalResponse
message DeletePrincipalResponse {
}

// GetPrincipalRequest is request model for geting principals.
//
// swagger:parameters getPrincipalRequest
message GetPrincipalRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // in: path
  string id = 3;
}

// GetPrincipalResponse is response model for geting principal.
//
// swagger:parameters getPrincipalResponse
message GetPrincipalResponse {
  // ID unique identifier assigned to this principal.
  // in: body
  string id = 1;

  // Version
  // in: body
  int64 version = 2;

  // OrganizationId of the principal user.
  // in: body
  string organization_id = 3;

  // Namespaces for principal
  // in: body
  repeated string namespaces = 4;

  // Username of the principal user.
  // in: body
  string username = 5;

  // Email of the principal user.
  // in: body
  string email = 6;

  // Name of the principal user.
  // in: body
  string name = 7;

  // Attributes of principal
  // in: body
  map<string, string> attributes = 8;

  // Groups that the principal belongs to including parent groups.
  // in: body
  repeated api.authz.types.Group groups = 9;

  // Roles that the principal belongs to including parent roles.
  // in: body
  repeated api.authz.types.Role roles = 10;

  // Resources that the principal belongs to including parent resources.
  // in: body
  repeated api.authz.types.Resource resources = 11;

  // Permissions that the principal belongs to including parent permissions.
  // in: body
  repeated api.authz.types.Permission permissions = 12;

  // Relationships that the principal belongs to.
  // in: body
  repeated api.authz.types.Relationship relations = 13;

  // Groups that the principal belongs to (only direct).
  // in: body
  repeated string group_ids = 14;

  // Roles that the principal belongs to (only direct).
  // in: body
  repeated string role_ids = 15;

  // Permissions that the principal belongs to (only direct).
  // in: body
  repeated string permission_ids = 16;

  // Created date
  // in: body
  google.protobuf.Timestamp created = 17;

  // Updated date
  // in: body
  google.protobuf.Timestamp updated = 18;
}

// QueryPrincipalRequest is request model for querying principals.
//
// swagger:parameters queryPrincipalRequest
message QueryPrincipalRequest {
  // in: path
  string organization_id = 1;

  // Name of the principal.
  // in:query
  map<string, string> predicates = 3;

  // in: query
  string offset = 4;

  // in: query
  int64 limit = 5;
}

// QueryPrincipalResponse is response model for querying principal.
//
// swagger:parameters queryPrincipalResponse
message QueryPrincipalResponse {
  // ID unique identifier assigned to this principal.
  // in: body
  string id = 1;

  // Version
  // in: body
  int64 version = 2;

  // OrganizationId of the principal user.
  // in: body
  string organization_id = 3;

  // Namespaces for principal
  // in: body
  repeated string namespaces = 4;

  // Username of the principal user.
  // in: body
  string username = 5;

  // Email of the principal user.
  // in: body
  string email = 6;

  // Name of the principal user.
  // in: body
  string name = 7;

  // Attributes of principal
  // in: body
  map<string, string> attributes = 8;

  // Groups that the principal belongs to.
  // in: body
  repeated string group_ids = 9;

  // Roles that the principal belongs to.
  // in: body
  repeated string role_ids = 10;

  // Permissions that the principal belongs to.
  // in: body
  repeated string permission_ids = 11;

  // Relationships that the principal belongs to.
  // in: body
  repeated string relation_ids = 12;

  // in: body
  string next_offset = 13;

  // Created date
  // in: body
  google.protobuf.Timestamp created = 14;

  // Updated date
  // in: body
  google.protobuf.Timestamp updated = 15;
}

// AddGroupsToPrincipalRequest is request model for adding group to principal.
//
// swagger:parameters addGroupsToPrincipalRequest
message AddGroupsToPrincipalRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // in: path
  string principal_id = 3;

  // GroupIds to add
  // in: body
  repeated string group_ids = 4;
}

// AddGroupsToPrincipalResponse is response model for adding group to principal.
//
// swagger:parameters addGroupsToPrincipalResponse
message AddGroupsToPrincipalResponse {
}

// DeleteGroupsToPrincipalRequest is request model for deleting group to principal.
//
// swagger:parameters deleteGroupsToPrincipalRequest
message DeleteGroupsToPrincipalRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // in: path
  string principal_id = 3;

  // GroupIds to remove
  // in: body
  repeated string group_ids = 4;
}

// DeleteGroupsToPrincipalResponse is response model for deleting group to principal.
//
// swagger:parameters deleteGroupsToPrincipalResponse
message DeleteGroupsToPrincipalResponse {
}

// AddRolesToPrincipalRequest is request model for adding role to principal.
//
// swagger:parameters addRolesToPrincipalRequest
message AddRolesToPrincipalRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // in: path
  string principal_id = 3;

  // RoleIds to add
  // in: body
  repeated string role_ids = 4;
}

// AddRolesToPrincipalResponse is response model for adding role to principal.
//
// swagger:parameters addRolesToPrincipalResponse
message AddRolesToPrincipalResponse {
}

// DeleteRolesToPrincipalRequest is request model for deleting role to principal.
//
// swagger:parameters deleteRolesToPrincipalRequest
message DeleteRolesToPrincipalRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // in: path
  string principal_id = 3;

  // RoleId to remove
  // in: body
  repeated string role_ids = 4;
}

// DeleteRolesToPrincipalResponse is response model for deleting role to principal.
//
// swagger:parameters deleteRolesToPrincipalResponse
message DeleteRolesToPrincipalResponse {
}

// AddPermissionsToPrincipalRequest is request model for adding permission to principal.
//
// swagger:parameters addPermissionsToPrincipalRequest
message AddPermissionsToPrincipalRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // in: path
  string principal_id = 3;

  // PermissionIds to add
  // in: body
  repeated string permission_ids = 4;
}

// AddPermissionsToPrincipalResponse is response model for adding permission to principal.
//
// swagger:parameters addPermissionsToPrincipalResponse
message AddPermissionsToPrincipalResponse {
}

// DeletePermissionsToPrincipalRequest is request model for deleting permission to principal.
//
// swagger:parameters deletePermissionsToPrincipalRequest
message DeletePermissionsToPrincipalRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // in: path
  string principal_id = 3;

  // PermissionId to remove
  // in: body
  repeated string permission_ids = 4;
}

// DeletePermissionsToPrincipalResponse is response model for deleting permission to principal.
//
// swagger:parameters deletePermissionsToPrincipalResponse
message DeletePermissionsToPrincipalResponse {
}

// AddRelationshipsToPrincipalRequest is request model for adding relation to principal.
//
// swagger:parameters addRelationshipsToPrincipalRequest
message AddRelationshipsToPrincipalRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // in: path
  string principal_id = 3;

  // RelationshipId to Add
  // in: body
  repeated string relationship_ids = 4;
}

// AddRelationshipsToPrincipalResponse is response model for adding relation to principal.
//
// swagger:parameters addRelationshipsToPrincipalResponse
message AddRelationshipsToPrincipalResponse {
}

// DeleteRelationshipsToPrincipalRequest is request model for deleting relation to principal.
//
// swagger:parameters deleteRelationshipsToPrincipalRequest
message DeleteRelationshipsToPrincipalRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // in: path
  string principal_id = 3;

  // RelationshipId to remove
  // in: body
  repeated string relationship_ids = 4;
}

// DeleteRelationshipsToPrincipalResponse is response model for deleting relation to principal.
//
// swagger:parameters deleteRelationshipsToPrincipalResponse
message DeleteRelationshipsToPrincipalResponse {
}

// PrincipalsService for authorization request
service PrincipalsService {
  // Create Principals swagger:route POST /api/v1/{organization_id}/principals principals createPrincipalRequest
  //
  // Responses:
  // 200: createPrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc Create (CreatePrincipalRequest) returns (CreatePrincipalResponse);

  // Update Principals swagger:route PUT /api/v1/{organization_id}/principals/{id} principals updatePrincipalRequest
  //
  // Responses:
  // 200: updatePrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc Update (UpdatePrincipalRequest) returns (UpdatePrincipalResponse);

  // Get Principal swagger:route GET /api/v1/{organization_id}/{namespace}/principals/{id} principals getPrincipalRequest
  //
  // Responses:
  // 200: getPrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc Get (GetPrincipalRequest) returns (GetPrincipalResponse);

  // Query Principal swagger:route GET /api/v1/{organization_id}/principals principals queryPrincipalRequest
  //
  // Responses:
  // 200: queryPrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc Query (QueryPrincipalRequest) returns (stream QueryPrincipalResponse);

  // Delete Principal swagger:route DELETE /api/v1/{organization_id}/principals/{id} principals deletePrincipalRequest
  //
  // Responses:
  // 200: deletePrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc Delete (DeletePrincipalRequest) returns (DeletePrincipalResponse);

  // AddGroups Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/groups/add principals addGroupsToPrincipalRequest
  //
  // Responses:
  // 200: addGroupsToPrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc AddGroups (AddGroupsToPrincipalRequest) returns (AddGroupsToPrincipalResponse);

  // DeleteGroups Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/groups/delete principals deleteGroupsToPrincipalRequest
  //
  // Responses:
  // 200: deleteGroupsToPrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc DeleteGroups (DeleteGroupsToPrincipalRequest) returns (DeleteGroupsToPrincipalResponse);

  // AddRoles Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/roles/add principals addRolesToPrincipalRequest
  //
  // Responses:
  // 200: addRolesToPrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc AddRoles (AddRolesToPrincipalRequest) returns (AddRolesToPrincipalResponse);

  // DeleteRole Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/roles/delete principals deleteRolesToPrincipalRequest
  //
  // Responses:
  // 200: deleteRolesToPrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc DeleteRoles (DeleteRolesToPrincipalRequest) returns (DeleteRolesToPrincipalResponse);

  // AddPermissions Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/permissions/add principals addPermissionsToPrincipalRequest
  //
  // Responses:
  // 200: addPermissionsToPrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc AddPermissions (AddPermissionsToPrincipalRequest) returns (AddPermissionsToPrincipalResponse);

  // DeletePermissions Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/permissions/delete principals deletePermissionsToPrincipalRequest
  //
  // Responses:
  // 200: deletePermissionsToPrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc DeletePermissions (DeletePermissionsToPrincipalRequest) returns (DeletePermissionsToPrincipalResponse);

  // AddRelationships Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/relations/add principals addRelationshipsToPrincipalRequest
  //
  // Responses:
  // 200: addRelationshipsToPrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc AddRelationships (AddRelationshipsToPrincipalRequest) returns (AddRelationshipsToPrincipalResponse);

  // DeleteRelationships Principal swagger:route PUT /api/v1/{organization_id}/{namespace}/principals/{id}/relations/delete principals deleteRelationshipsToPrincipalRequest
  //
  // Responses:
  // 200: deleteRelationshipsToPrincipalResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc DeleteRelationships (DeleteRelationshipsToPrincipalRequest) returns (DeleteRelationshipsToPrincipalResponse);
}
