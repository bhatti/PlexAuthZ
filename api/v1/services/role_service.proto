syntax = "proto3";

package api.authz.services;

option go_package = "github.com/bhatti/PlexAuthZ/api/authz/services";

import "google/protobuf/timestamp.proto";

// CreateRoleRequest is request model for creating role.
//
// swagger:parameters createRoleRequest
message CreateRoleRequest {
  // in: path
  string organization_id = 1;
  // in: path
  string namespace = 2;

  // Name of the role.
  // in: body
  string name = 3;

  // Optional parent ids
  // in: body
  repeated string parent_ids = 4; // optional
}

// CreateRoleResponse is response model for creating role.
//
// swagger:parameters createRoleResponse
message CreateRoleResponse {
  // ID unique identifier assigned to this role.
  // in: body
  string id = 1;
}

// UpdateRoleRequest is request model for updating role.
//
// swagger:parameters updateRoleRequest
message UpdateRoleRequest {
  // in: path
  string organization_id = 1;
  // in: path
  string namespace = 2;
  // in: path
  string id = 3;

  // Version
  // in: body
  int64 version = 4;

  // Name of the role.
  // in: body
  string name = 5;

  // Optional parent ids
  // in: body
  repeated string parent_ids = 6; // optional
}

// UpdateRoleResponse is response model for updating role.
//
// swagger:parameters updateRoleResponse
message UpdateRoleResponse {
}

// DeleteRoleRequest is request model for deleting role.
//
// swagger:parameters deleteRoleRequest
message DeleteRoleRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // in: path
  string id = 3;
}

// DeleteRoleResponse is response model for deleting role by id.
//
// swagger:parameters deleteRoleResponse
message DeleteRoleResponse {
}

// QueryRoleRequest is request model for querying roles.
//
// swagger:parameters queryRoleRequest
message QueryRoleRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // Name of the role.
  // in:query
  map<string, string> predicates = 3;

  // in: query
  string offset = 4;

  // in: query
  int64 limit = 5;
}

// QueryRoleResponse is response model for querying role.
//
// swagger:parameters queryRoleResponse
message QueryRoleResponse {
  // ID unique identifier assigned to this role.
  // in: body
  string id = 1;

  // Version
  // in: body
  int64 version = 2;

  // Namespace of role.
  // in: Body
  string namespace = 3;

  // Name of the role.
  // in: path
  string name = 4;

  // PermissionIDs that can be performed.
  // in: path
  repeated string permission_ids = 5;

  // Optional parent ids
  // in: path
  repeated string parent_ids = 6; // optional

  // in: body
  string next_offset = 7;

  // Created date
  // in: body
  google.protobuf.Timestamp created = 8;

  // Updated date
  // in: body
  google.protobuf.Timestamp updated = 9;
}

// AddPermissionsToRoleRequest is request model for adding permission to role.
//
// swagger:parameters addPermissionsToRoleRequest
message AddPermissionsToRoleRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // in: path
  string role_id = 3;

  // PermissionIds to add
  // in: body
  repeated string permission_ids = 4;
}

// AddPermissionsToRoleResponse is response model for adding permission to role.
//
// swagger:parameters addPermissionsToRoleResponse
message AddPermissionsToRoleResponse {
}

// DeletePermissionsToRoleRequest is request model for deleting permission to role.
//
// swagger:parameters deletePermissionsToRoleRequest
message DeletePermissionsToRoleRequest {
  // in: path
  string organization_id = 1;

  // in: path
  string namespace = 2;

  // in: path
  string role_id = 3;

  // PermissionIds to remove
  // in: body
  repeated string permission_ids = 4;
}

// DeletePermissionsToRoleResponse is response model for deleting permission to role.
//
// swagger:parameters deletePermissionsToRoleResponse
message DeletePermissionsToRoleResponse {
}

// RolesService for authorization request
service RolesService {
  // Create Roles swagger:route POST /api/v1/{organization_id}/{namespace}/roles roles createRoleRequest
  //
  // Responses:
  // 200: createRoleResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc Create (CreateRoleRequest) returns (CreateRoleResponse);

  // Update Roles swagger:route PUT /api/v1/{organization_id}/{namespace}/roles/{id} roles updateRoleRequest
  //
  // Responses:
  // 200: updateRoleResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc Update (UpdateRoleRequest) returns (UpdateRoleResponse);

  // Query Role swagger:route GET /api/v1/{organization_id}/{namespace}/roles roles queryRoleRequest
  //
  // Responses:
  // 200: queryRoleResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc Query (QueryRoleRequest) returns (stream QueryRoleResponse);

  // Delete Role swagger:route DELETE /api/v1/{organization_id}/{namespace}/roles/{id} roles deleteRoleRequest
  //
  // Responses:
  // 200: deleteRoleResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc Delete (DeleteRoleRequest) returns (DeleteRoleResponse);

  // AddPermissions Role swagger:route PUT /api/v1/{organization_id}/{namespace}/roles/{id}/permissions/add roles addPermissionsToRoleRequest
  //
  // Responses:
  // 200: addPermissionsToRoleResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc AddPermissions (AddPermissionsToRoleRequest) returns (AddPermissionsToRoleResponse);

  // DeletePermissions Role swagger:route PUT /api/v1/{organization_id}/{namespace}/roles/{id}/permissions/delete roles deletePermissionsToRoleRequest
  //
  // Responses:
  // 200: deletePermissionsToRoleResponse
  // 400	Bad Request
  // 401	Not Authorized
  // 500	Internal Error
  rpc DeletePermissions (DeletePermissionsToRoleRequest) returns (DeletePermissionsToRoleResponse);

}

