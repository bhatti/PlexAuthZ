// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/v1/services/groups_service.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupsServiceClient is the client API for GroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupsServiceClient interface {
	// Create Groups swagger:route POST /api/v1/{organization_id}/{namespace}/groups groups updateGroupRequest
	//
	// Responses:
	// 200: updateGroupResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Create(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	// Update Groups swagger:route PUT /api/v1/{organization_id}/{namespace}/groups groups/{id} updateGroupRequest
	//
	// Responses:
	// 200: updateGroupResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Update(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	// Query Group swagger:route GET /api/v1/{organization_id}/{namespace}/groups groups queryGroupRequest
	//
	// Responses:
	// 200: queryGroupResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Query(ctx context.Context, in *QueryGroupRequest, opts ...grpc.CallOption) (GroupsService_QueryClient, error)
	// Delete Group swagger:route DELETE /api/v1/{organization_id}/{namespace}/groups/{id} groups deleteGroupRequest
	//
	// Responses:
	// 200: deleteGroupResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	// AddRoles Group swagger:route PUT /api/v1/{organization_id}/{namespace}/groups/{id}/roles/add groups addRolesToGroupRequest
	//
	// Responses:
	// 200: addRolesToGroupResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	AddRoles(ctx context.Context, in *AddRolesToGroupRequest, opts ...grpc.CallOption) (*AddRolesToGroupResponse, error)
	// DeleteRoles Group swagger:route PUT /api/v1/{organization_id}/{namespace}/groups/{id}/roles/delete groups deleteRolesToGroupRequest
	//
	// Responses:
	// 200: deleteRolesToGroupResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	DeleteRoles(ctx context.Context, in *DeleteRolesToGroupRequest, opts ...grpc.CallOption) (*DeleteRolesToGroupResponse, error)
}

type groupsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsServiceClient(cc grpc.ClientConnInterface) GroupsServiceClient {
	return &groupsServiceClient{cc}
}

func (c *groupsServiceClient) Create(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.GroupsService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) Update(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.GroupsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) Query(ctx context.Context, in *QueryGroupRequest, opts ...grpc.CallOption) (GroupsService_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &GroupsService_ServiceDesc.Streams[0], "/api.authz.services.GroupsService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &groupsServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GroupsService_QueryClient interface {
	Recv() (*QueryGroupResponse, error)
	grpc.ClientStream
}

type groupsServiceQueryClient struct {
	grpc.ClientStream
}

func (x *groupsServiceQueryClient) Recv() (*QueryGroupResponse, error) {
	m := new(QueryGroupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *groupsServiceClient) Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.GroupsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) AddRoles(ctx context.Context, in *AddRolesToGroupRequest, opts ...grpc.CallOption) (*AddRolesToGroupResponse, error) {
	out := new(AddRolesToGroupResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.GroupsService/AddRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsServiceClient) DeleteRoles(ctx context.Context, in *DeleteRolesToGroupRequest, opts ...grpc.CallOption) (*DeleteRolesToGroupResponse, error) {
	out := new(DeleteRolesToGroupResponse)
	err := c.cc.Invoke(ctx, "/api.authz.services.GroupsService/DeleteRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsServiceServer is the server API for GroupsService service.
// All implementations must embed UnimplementedGroupsServiceServer
// for forward compatibility
type GroupsServiceServer interface {
	// Create Groups swagger:route POST /api/v1/{organization_id}/{namespace}/groups groups updateGroupRequest
	//
	// Responses:
	// 200: updateGroupResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Create(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	// Update Groups swagger:route PUT /api/v1/{organization_id}/{namespace}/groups groups/{id} updateGroupRequest
	//
	// Responses:
	// 200: updateGroupResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Update(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	// Query Group swagger:route GET /api/v1/{organization_id}/{namespace}/groups groups queryGroupRequest
	//
	// Responses:
	// 200: queryGroupResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Query(*QueryGroupRequest, GroupsService_QueryServer) error
	// Delete Group swagger:route DELETE /api/v1/{organization_id}/{namespace}/groups/{id} groups deleteGroupRequest
	//
	// Responses:
	// 200: deleteGroupResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	Delete(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	// AddRoles Group swagger:route PUT /api/v1/{organization_id}/{namespace}/groups/{id}/roles/add groups addRolesToGroupRequest
	//
	// Responses:
	// 200: addRolesToGroupResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	AddRoles(context.Context, *AddRolesToGroupRequest) (*AddRolesToGroupResponse, error)
	// DeleteRoles Group swagger:route PUT /api/v1/{organization_id}/{namespace}/groups/{id}/roles/delete groups deleteRolesToGroupRequest
	//
	// Responses:
	// 200: deleteRolesToGroupResponse
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	DeleteRoles(context.Context, *DeleteRolesToGroupRequest) (*DeleteRolesToGroupResponse, error)
	mustEmbedUnimplementedGroupsServiceServer()
}

// UnimplementedGroupsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupsServiceServer struct {
}

func (UnimplementedGroupsServiceServer) Create(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGroupsServiceServer) Update(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGroupsServiceServer) Query(*QueryGroupRequest, GroupsService_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedGroupsServiceServer) Delete(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGroupsServiceServer) AddRoles(context.Context, *AddRolesToGroupRequest) (*AddRolesToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoles not implemented")
}
func (UnimplementedGroupsServiceServer) DeleteRoles(context.Context, *DeleteRolesToGroupRequest) (*DeleteRolesToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoles not implemented")
}
func (UnimplementedGroupsServiceServer) mustEmbedUnimplementedGroupsServiceServer() {}

// UnsafeGroupsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsServiceServer will
// result in compilation errors.
type UnsafeGroupsServiceServer interface {
	mustEmbedUnimplementedGroupsServiceServer()
}

func RegisterGroupsServiceServer(s grpc.ServiceRegistrar, srv GroupsServiceServer) {
	s.RegisterService(&GroupsService_ServiceDesc, srv)
}

func _GroupsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.GroupsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).Create(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.GroupsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).Update(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryGroupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GroupsServiceServer).Query(m, &groupsServiceQueryServer{stream})
}

type GroupsService_QueryServer interface {
	Send(*QueryGroupResponse) error
	grpc.ServerStream
}

type groupsServiceQueryServer struct {
	grpc.ServerStream
}

func (x *groupsServiceQueryServer) Send(m *QueryGroupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GroupsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.GroupsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).Delete(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_AddRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolesToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).AddRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.GroupsService/AddRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).AddRoles(ctx, req.(*AddRolesToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupsService_DeleteRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRolesToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServiceServer).DeleteRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.authz.services.GroupsService/DeleteRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServiceServer).DeleteRoles(ctx, req.(*DeleteRolesToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupsService_ServiceDesc is the grpc.ServiceDesc for GroupsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.authz.services.GroupsService",
	HandlerType: (*GroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GroupsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GroupsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GroupsService_Delete_Handler,
		},
		{
			MethodName: "AddRoles",
			Handler:    _GroupsService_AddRoles_Handler,
		},
		{
			MethodName: "DeleteRoles",
			Handler:    _GroupsService_DeleteRoles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _GroupsService_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/services/groups_service.proto",
}
